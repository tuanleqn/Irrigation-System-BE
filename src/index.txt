import express from 'express'
import dotenv from 'dotenv'
dotenv.config()
import dbInstance from './models/db'
import usersRouter from './routes/users.routes'
import swaggerUi from 'swagger-ui-express'
import swaggerSpec from '../swagger/swagger'
import http from 'http'
import { Server } from 'socket.io'
import axios from 'axios'
import cors from 'cors'

const app = express()
app.use(express.json())
app.use(cors())

dbInstance.connect()
process.on('SIGINT', async () => {
  await dbInstance.disconnect()
  process.exit(0)
})

//! Routes
//* Redirect root URL to /api-docs
app.get('/', (req, res) => {
  res.redirect('/api-docs')
})
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec))

app.use('/users', usersRouter)

//! Socket.io
const server = http.createServer(app)
const io = new Server(server, { cors: { origin: '*' } })
const FEED_URL = 'https://io.adafruit.com/api/v2/tranhaithaoquang/feeds/temperature/data'
io.on('connection', (socket) => {
  console.log(`Client connected: ${socket.id}`)
  socket.on('disconnect', () => {
    console.log(`Client disconnected: ${socket.id}`)
  })
})

async function fetchAndBroadcastData() {
  try {
    const response = await axios.get(FEED_URL, {
      headers: {
        'X-AIO-Key': 'aio_RFsX33n42uI8sWpL5TQlozLSOPUl'
      }
    })
    const data = response.data
    console.log(data[0])
    io.emit('temperatureData', data[0])
    console.log('Broadcasted data at:', new Date().toLocaleString())
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('Error fetching data:', error.message)
    } else {
      console.error('Unexpected error:', error)
    }
  }
}

setInterval(fetchAndBroadcastData, 10000)

server.listen(process.env.BE_PORT, () => {
  console.log(`Server is running on port ${process.env.BE_PORT}`)
  console.log(`Access the local server at http://localhost:${process.env.BE_PORT}`)
  console.log(`Or the network server at https://irrigation-system-be.onrender.com`)
})

// app.listen(process.env.BE_PORT, () => {
//   console.log(`Server is running on port ${process.env.BE_PORT}
// Access the local server at http://localhost:${process.env.BE_PORT}
// or the network server at https://irrigation-system-be.onrender.com`)
// })



import express from 'express'
import dotenv from 'dotenv'
dotenv.config()
import dbInstance from './models/db'
import usersRouter from './routes/users.routes'
import swaggerUi from 'swagger-ui-express'
import swaggerSpec from '../swagger/swagger'
import http from 'http'
import { Server } from 'socket.io'
import cors from 'cors'
import mqtt from 'mqtt'

const app = express()
app.use(express.json())
app.use(cors())

dbInstance.connect()
process.on('SIGINT', async () => {
  await dbInstance.disconnect()
  process.exit(0)
})

//! Routes
//* Redirect root URL to /api-docs
app.get('/', (req, res) => {
  res.redirect('/api-docs')
})
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec))
app.use('/users', usersRouter)

//! Socket.io: tạo HTTP server và gắn Socket.IO
const server = http.createServer(app)
const io = new Server(server, { cors: { origin: '*' } })

//! Tích hợp MQTT qua WebSocket từ Adafruit IO
const ADAFRUIT_IO_USERNAME = 'tranhaithaoquang'
const ADAFRUIT_IO_KEY = 'aio_RFsX33n42uI8sWpL5TQlozLSOPUl'
const mqttUrl = 'wss://io.adafruit.com:443'
const mqttOptions = {
  username: ADAFRUIT_IO_USERNAME,
  password: ADAFRUIT_IO_KEY
}
const mqttClient = mqtt.connect(mqttUrl, mqttOptions)

//! Đăng ký nhiều topic cảm biến
const topics = [`${ADAFRUIT_IO_USERNAME}/feeds/temperature`, `${ADAFRUIT_IO_USERNAME}/feeds/soil-moisture`]

//! Lưu trạng thái mới nhất của dữ liệu cảm biến
const sensorData = {
  temperature: null,
  soilMoisture: null
}

//! Danh sách client SSE
const sseClients: { id: number; res: express.Response }[] = []

mqttClient.on('connect', () => {
  console.log('Connected to Adafruit IO MQTT via WebSocket')
  mqttClient.subscribe(topics, (err) => {
    if (err) {
      console.error('Failed to subscribe to topics:', err)
    } else {
      console.log('Subscribed to topics:', topics)
    }
  })
})

mqttClient.on('message', (topic, message) => {
  try {
    const payload = JSON.parse(message.toString())
    console.log(`Received MQTT message from ${topic}:`, payload)

    let eventName = ''
    if (topic.includes('temperature')) {
      eventName = 'temperatureData'
      sensorData.temperature = payload
    } else if (topic.includes('soil-moisture')) {
      eventName = 'soilMoistureData'
      sensorData.soilMoisture = payload
    }

    if (eventName) {
      io.emit(eventName, payload)
      console.log(`Broadcasted ${eventName} via MQTT at:`, new Date().toLocaleString())

      // Gửi dữ liệu cho tất cả SSE client
      sseClients.forEach((client) => client.res.write(`data: ${JSON.stringify(sensorData)}\n\n`))
    }
  } catch (error) {
    console.error('Error parsing MQTT message:', error)
  }
})

//! SSE Endpoint để frontend kết nối nhận dữ liệu liên tục
app.get('/sensor-data', (req, res) => {
  res.setHeader('Content-Type', 'text/event-stream')
  res.setHeader('Cache-Control', 'no-cache')
  res.setHeader('Connection', 'keep-alive')
  res.flushHeaders()

  // Gửi dữ liệu hiện tại ngay khi kết nối
  res.write(`data: ${JSON.stringify(sensorData)}\n\n`)

  const clientId = Date.now()
  sseClients.push({ id: clientId, res })
  console.log(`Client ${clientId} connected to SSE`)

  req.on('close', () => {
    sseClients.splice(
      sseClients.findIndex((c) => c.id === clientId),
      1
    )
    console.log(`Client ${clientId} disconnected from SSE`)
  })
})

server.listen(process.env.BE_PORT, () => {
  console.log(`Server is running on port ${process.env.BE_PORT}`)
  console.log(`Access the local server at http://localhost:${process.env.BE_PORT}`)
  console.log(`Or the network server at https://irrigation-system-be.onrender.com`)
})
